#!/usr/bin/env python3
import argparse
from PIL import Image
import sys
import os
import re


def to_rgb24(img):
    img = img.convert('RGB')
    return list(img.getdata()), 24


def to_rgb565(pixels):
    out_bytes = bytearray()
    for (r, g, b) in pixels:
        r5 = (r * 31) // 255
        g6 = (g * 63) // 255
        b5 = (b * 31) // 255
        val = (r5 << 11) | (g6 << 5) | b5
        out_bytes.append(val & 0xFF)
        out_bytes.append((val >> 8) & 0xFF)
    return out_bytes, 16


def rle_encode_rgb24(pixels):
    if not pixels:
        return bytearray(), 0
    out = bytearray()
    prev = pixels[0]
    run = 1
    for p in pixels[1:]:
        if p == prev and run < 255:
            run += 1
        else:
            out.append(run)
            out.extend(prev)
            prev = p
            run = 1
    out.append(run)
    out.extend(prev)
    return out, 0


def _sanitize_label(label):
    if not label:
        return 'img'
    s = re.sub(r'[^0-9A-Za-z_]', '_', label)
    if re.match(r'^[0-9]', s):
        s = '_' + s
    return s


def write_nasm(filename, label, width, height, bpp, data_bytes, mode='bytes'):
    with open(filename, 'w', encoding='utf-8') as f:
        f.write('; Generated by pngtoasm\n')
        f.write('SECTION .rodata\n')
        f.write(f'{label}_width  dd {width}\n')
        f.write(f'{label}_height dd {height}\n')
        f.write(f'{label}_bpp    dd {bpp}\n')
        f.write(f'{label}_data:\n')
        per_line = 16
        total = len(data_bytes)
        i = 0
        if mode == 'words' and bpp == 16 and total % 2 == 0:
            # write as words (dw), grouping little-endian pairs
            words_per_line = per_line // 2
            while i < total:
                chunk = data_bytes[i:i+words_per_line*2]
                pairs = [chunk[j] | (chunk[j+1] << 8) for j in range(0, len(chunk), 2)]
                line = '    dw ' + ','.join(f'0x{w:04X}' for w in pairs)
                f.write(line + '\n')
                i += len(chunk)
        else:
            while i < total:
                chunk = data_bytes[i:i+per_line]
                line = '    db ' + ','.join(f'0x{b:02X}' for b in chunk)
                f.write(line + '\n')
                i += per_line


def main():
    p = argparse.ArgumentParser(description='Convert PNG -> NASM .inc')
    p.add_argument('input', help='Input PNG file')
    p.add_argument('output', help='Output .inc/.asm file')
    p.add_argument('--format', choices=['rgb24','rgb565','rle'], default='rgb24', help='Output pixel encoding')
    p.add_argument('--label', default='img', help='Symbol label base (img_width, img_data, etc)')
    p.add_argument('--mode', choices=['bytes','words'], default='bytes', help='Write as bytes (db) or words (dw) where applicable')
    args = p.parse_args()

    if not os.path.isfile(args.input):
        print('Error: input file does not exist', file=sys.stderr)
        sys.exit(2)

    try:
        img = Image.open(args.input)
    except Exception as e:
        print('Error opening input:', e, file=sys.stderr)
        sys.exit(3)

    w, h = img.size
    fmt = args.format
    label = _sanitize_label(args.label)

    if fmt == 'rgb24':
        pixels, bpp = to_rgb24(img)
        data = bytearray()
        for (r, g, b) in pixels:
            data.extend((r, g, b))
    elif fmt == 'rgb565':
        pixels, _ = to_rgb24(img)
        data, bpp = to_rgb565(pixels)
    elif fmt == 'rle':
        pixels, _ = to_rgb24(img)
        flat = [bytes((r, g, b)) for (r, g, b) in pixels]
        data, bpp = rle_encode_rgb24(flat)
    else:
        print('Unknown format', fmt, file=sys.stderr)
        sys.exit(4)

    try:
        write_nasm(args.output, label, w, h, bpp, data, mode=args.mode)
    except Exception as e:
        print('Error writing output:', e, file=sys.stderr)
        sys.exit(5)

    print(f'Done: wrote {args.output} ({w}x{h}, format={fmt})')


if __name__ == '__main__':
    main()
